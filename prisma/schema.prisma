// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("POSTGRES_PRISMA_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  EDITOR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(EDITOR)
  pwd           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime  @default(now())
  blocked       Boolean   @default(false)
  memo          String?

  paymentCurrency Currency?
  paymentMethod   PaymentMethod?
  paymentTarget   String?

  accounts Account[]
  sessions Session[]

  projects  ProjectsOfUsers[]
  documents Document[]

  incomeRecords IncomeRecord[]
  payoutRecords PayoutRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Language {
  enUS
  zhCN
  jaJP
}

enum ProjectStatus {
  PREPARING
  PROGRESSING
  REVIEWING
  COMPLETED // Payout records will be generated
  ARCHIVED
}

model Project {
  id          String        @id @default(cuid())
  name        String
  srcLang     Language
  dstLang     Language
  memo        String?
  aiParameter Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      ProjectStatus @default(PREPARING)

  documents Document[]
  users     ProjectsOfUsers[]

  incomeRecords IncomeRecord[]
  payoutRecords PayoutRecord[]
}

model ProjectsOfUsers {
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  assignedAt DateTime @default(now())

  @@id([projectId, userId])
}

enum DocumentType {
  INTRODUCTION
  CURRICULUM
  SUBTITLE
  ARTICLE
  QUIZ
  ATTACHMENT
}

enum DocumentState {
  OPEN
  WORKING
  REVIEW
  CLOSED // Income records will be generated
}

model Document {
  id        String        @id @default(cuid())
  seq       Int           @default(9999)
  title     String
  type      DocumentType
  srcJson   Json?
  dstJson   Json?
  state     DocumentState @default(OPEN)
  memo      String?
  wordCount Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: NoAction)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: NoAction)

  incomeRecords IncomeRecord[]
}

enum PayoutStatus {
  NOTPAID
  PAID
  FROZEN
}

enum Currency {
  USD
  CNY
  JPY
}

enum PaymentMethod {
  PayPal
  Alipay
}

model IncomeRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  number    Float
  wordCount Int
  rate      Float

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: NoAction)

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: NoAction)

  payoutRecordId String?
  payoutRecord   PayoutRecord? @relation(fields: [payoutRecordId], references: [id], onDelete: Cascade)
}

model PayoutRecord {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  number       Float // in USD
  exchangeRate Float

  status          PayoutStatus
  paymentCurrency Currency
  paymentTarget   String
  paymentMethod   PaymentMethod
  memo            String?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: NoAction)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: NoAction)

  incomeRecords IncomeRecord[]
}
